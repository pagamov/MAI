% Task 1: Предикаты работы со списками

% Проверяет принадлежность элемента списку.
% true если Х принадлежит второму аргументу
% false в обратном
member_l(X, [X|_T]).
member_l(X, [_H|T]) :-
    member_l(X, T).

% Первый параметр длина списка
% Второй сам список
length_l(0, []).
length_l(X, [_H|T]) :-
    length_l(X1, T), X is X1 + 1.

% Соединяет в порядке первый список + второй список по порядку
% 3-ий аргумент - полученный список
append_l([],[],[]).
append_l([], X, X).
append_l([X|L1], L2, [X|L3]) :-
    append_l(L1, L2, L3).

% Удаляет все включения элемента из списка
% Первый аргумент - число которое надо удалить
% Второй аргумент - откуда
% Третий - полученный список
remove_l(_, [], []).
remove_l(E,[E|T],L) :-
    remove_l(E, T, L).
remove_l(E,[H|T],[H|T1]) :-
    remove_l(E,T,T1).

% Удаляет включение списка в первом аргументе
% из списка во втором
% Возвратит в 3-ем результат
% Пример remove_list([1,2],[0,1,2,3],[0,3]) будет верно
remove_list(_, [], []).
remove_list(L, [X|Tail], Result) :-
    member_l(X, L), !,
    remove_list(L, Tail, Result).
remove_list(L, [X|Tail], [X|Result]) :-
    remove_list(L, Tail, Result).

% Возвращает все перестановки данного списка
% Первый аргумент список
% Второй - результат перестановки
perm_l([], []).
perm_l([H|T], S) :-
    perm_l(T, P),
    append_l(X, Y, P),
    append_l(X, [H|Y], S).

% Переворачивает список из 1-ого аргумента
% Возвращает во втором
reverse_l([],[]).
reverse_l([H|T], L) :-
    reverse_l(T, T1),
    append_l(T1, [H], L).

% Проверяет включение подсписка в список
% Верно если 1-ый содержится в 2-ом
sublist_l([], _).
sublist_l([H|T], [H|L1]) :-
    sublist_l(T, L1).
sublist_l([H|T], [_|L1]) :-
    sublist_l([H|T], L1).


% сумма числового списка
sum_l([], 0).
sum_l([H|T],Sum) :-
  sum_l(T,Sum1),
  Sum is H + Sum1.

% сортировка
naive_sort(List,Sorted) :-
  perm_l(List,Sorted),
  is_sorted(Sorted).
is_sorted([]).
is_sorted([_]).
is_sorted([X,Y|T]) :-
  X =< Y,
  is_sorted([Y|T]).

% Предикаты обработки списков
% Вариант 5

% Удаляет первые N элементов
% N вводится в первом аргументе
% Пример: delN_l(2, [0,1,2,3], [2,3]) будет верно
delN_l(_, [], []).
delN_l(0, L, L) :- !.
delN_l(X, [_H|T], L) :-
    X > 0,
    X1 is X - 1,
    delN_l(X1, T, L).


% Предикаты обработки числовых списков
% Вариант 10

% Выводит лексиграфически больший из списков
% На проверку в 1-ый и 2-ой аргументы поступают списки чисел
% Возвращает в 3-ем больший из них
lec_l([],[],[]) :- !.
lec_l([],L,L) :- !.
lec_l(L,[],L) :- !.
lec_l([H1|T1], [H1|T2], RES) :-
    append_l([H1], R, RES),
    lec_l(T1, T2, R).
lec_l([H1|T1], [H2|_T2], RES) :-
    H1 > H2,
    append_l([H1], T1, RES).
lec_l([H1|_T1], [H2|T2], RES) :-
    H1 < H2,
    append_l([H2], T2, RES).
