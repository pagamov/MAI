% Task 2: Relational Data
% Для работы необходимо подключить task1.pl а также базу данных one.pl

% Вариант 2
%    - Напечатать средний балл для каждого предмета - h1().
%    - Для каждой группы, найти количество не сдавших студентов - h2().
%    - Найти количество не сдавших студентов для каждого из предметов - h3().

% задание 2/1
% функция возращает среднее значение по оценкам по каждому предмету
h1() :-
    findall(X, subject(X, _), L),
    h1_1(L).

h1_1([]).
h1_1([H|T]) :-
    h1_2(H, GRADE),
    subject(H, PRED),
    write(PRED),        tab(1),
    write('---'),       tab(1),
    write(GRADE),       nl,
    h1_1(T).

% возвращает среднюю оценку по предметам
h1_2(SUB, X) :-
    findall(PIV, grade(_, SUB, PIV), GRADES),
    length_l(LEN, GRADES),
    sum_l(GRADES, SUM),
    X is SUM / LEN.

% задание 2/2
% возвращает кол во несдавших студентов по каждой группе
h2() :-
    findall(X, student(_, X), STUDENTS),    % - список студентов
    findall(Y, student(Y, _), GROUP1),
    h2_1(GROUP1, GROUP2),                   % - группы без повторов
    naive_sort(GROUP2, GROUP), !,           % - группы отсортированы
    h2_2(GROUP, STUDENTS).

% получает список групп и студентов и пишет тех кто не сдал
h2_2([],_) :- !.
h2_2([H1|T], P) :-
    h2_3(H1,P,INGROUP),
    h2_4(H1, INGROUP, COUNT),
    write('В '),            tab(1),
    write(H1),              tab(1),
    write(' не сдало '),    tab(1),
    write(COUNT),           tab(1),
    write('человек'),       nl,
    h2_2(T, P).             % - рекурсиваня проверка след группы

h2_3(_, [], []) :- !.
h2_3(G, [H|T], L) :-
    h2_5(G, H, I),
    h2_3(G, T, L1),
    append_l(I, L1, L).

h2_5(G, H, [H]) :-
    student(G, H).
h2_5(_, _, []).

h2_4(_,[],0).
h2_4(G,[H|T],RES) :-        % G - группа [H|T] - массив студентов
    h2_4(G, T, R),          % счиатется их кол во рекурсивно от хвоста
    h2_6(H, U),             % проверка на плохую оценку H - текущий студент
    RES is (R + U).

h2_6(H, 1) :-
    grade(H, _, 2), !.
h2_6(_, 0) :- !.

% возвращает список без повторов
h2_1([], []) :- !.
h2_1([L],[L]) :- !.
h2_1([H|T], [H|T1]) :-
    remove_l(H, T, T2),
    h2_1(T2, T1), !.


% задание 2/3
% возвращает кол во несдавших студентов по каждому предмету
h3() :-
    findall(X, student(_, X), STUDENTS),    % - список студентов
    findall(Y, subject(Y, _), SUB),         % - список предметов абрв
    h3_1(SUB, STUDENTS), !.

h3_1([],_) :- !.
h3_1([H|T], P) :-
    h3_2(H, P, COUNT),
    subject(H, H1),
    write(H1),              tab(1),
    write('не сдало'),      tab(1),
    write(COUNT),           tab(1),
    write('человек'),       nl,
    h3_1(T, P).             % - рекурсиваня проверка след группы

h3_2(_,[],0).
h3_2(G, [H|T], RES) :-      % G - предмет [H|T] - массив студентов
    h3_2(G, T, R),          % счиатется их кол во рекурсивно от хвоста
    h3_3(H, G, U),          % проверка на плохую оценку H - текущий студент
    RES is (R + U).

h3_3(H, G, 1) :-
    grade(H, G, 2), !.
h3_3(_,_,0) :- !.
